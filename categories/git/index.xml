<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on Mainroad</title><link>https://tomonorimatsumura.github.io/blog/categories/git/</link><description>Recent content in Git on Mainroad</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 24 Feb 2017 13:48:06 +0000</lastBuildDate><atom:link href="https://tomonorimatsumura.github.io/blog/categories/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Gitリポジトリをcloneしてpushするまでの流れ</title><link>https://tomonorimatsumura.github.io/blog/p1231/</link><pubDate>Fri, 24 Feb 2017 13:48:06 +0000</pubDate><guid>https://tomonorimatsumura.github.io/blog/p1231/</guid><description>クライアント側の設定をする クライアント側では最低限「user.name」および「user.email」を設定しておく。
# 現在の設定を確認する git config --list # ユーザー名、メールアドレスを適宜設定する git config --global user.name &amp;quot;John Doe&amp;quot; git config --global user.email johndoe@example.com リポジトリをCloneする SSHで接続する場合。
git clone ssh://{{ user }}@{{ yourdomain }}:{{ port }}/var/git/{{ git-repo }} リポジトリに編集をPushする # 変更したファイルをステージングする git add -A # ファイルの状態を確認する git status # 変更をコミットする git commit -m &amp;quot;ファイルを変更した旨のコメント&amp;quot; # リモートブランチへpushする git push origin master 参考サイト Git – Git の設定 Git – 変更内容のリポジトリへの記録</description></item><item><title>Gitリポジトリを移設する</title><link>https://tomonorimatsumura.github.io/blog/p1101/</link><pubDate>Wed, 16 Dec 2015 10:00:23 +0000</pubDate><guid>https://tomonorimatsumura.github.io/blog/p1101/</guid><description>移設側でリポジトリのリストを作成する ls /var/git -l | grep ^d | awk &amp;quot;{print $9}&amp;quot; &amp;amp;gt; git.list.txt 移設先で共有ベアリポジトリを作成する # 「git.list.txt」を取得しておく cd /var/git while read line; do mkdir $line; cd $line; git init --bare --shared; cd /var/git; done &amp;amp;lt; git.list.txt 移設元から移設先へリポジトリをpushする cd /var/git while read line; do if [ -d ${line} ]; then cd ${line}; git push --mirror ssh://git@{git-server}:{port}/var/git/${line}; fi; cd /var/git; done &amp;amp;lt; git.list.txt 参考サイト Git – サーバーのセットアップ</description></item><item><title>Windows7にGitをインストールする</title><link>https://tomonorimatsumura.github.io/blog/p990/</link><pubDate>Fri, 29 May 2015 13:38:28 +0000</pubDate><guid>https://tomonorimatsumura.github.io/blog/p990/</guid><description>壮年団の写真及び動画整理の関係で、コマンドプロンプトのプログラミングコードを書く必要が出てきた。Windows機からGitが直接使えた方が作業が楽なのでWindows7にGitをインストールした。
Git for Windowsをインストールする Git for Windowsをダウンロードしインストールする。
『Run Git from the Windows Command Prompt』を選ぶと良い。『Run Git and included Unix tools from the Windows Command Prompt』は環境変数を汚染する可能性があるので使わないほうが無難。
この画面は『Checkout Windows-style, commit Unix line endings』を選んだが、まだ運用してみないとどう出るのか分からない。
SSHの設定を行う Git for Windowsは『/user/.ssh』に鍵ファイルを探しに行くので、このフォルダに鍵ファイルを設置する。
参考サイト Git for Windows 私家版 Git For Windowsのインストール手順 | OPC Diary</description></item><item><title>RedmineとGitの連携についてのメモ</title><link>https://tomonorimatsumura.github.io/blog/p985/</link><pubDate>Thu, 28 May 2015 13:06:32 +0000</pubDate><guid>https://tomonorimatsumura.github.io/blog/p985/</guid><description> コミットメッセージにチケット番号を付与する時は半角スペースで区切る。 コミットメッセージに作業時間を記録することが出来る EclipseでGitのコミットの取り消しが出来る場合がある。 参考サイト バージョン管理システムとの連携 — Redmine.JP Redmine 1.1 新機能紹介: コミットメッセージによる作業時間の記録 | Redmine.JP Blog</description></item><item><title>Gitで常に除外したい設定を.gitconfig で設定する</title><link>https://tomonorimatsumura.github.io/blog/p889/</link><pubDate>Sun, 20 Oct 2013 11:11:30 +0000</pubDate><guid>https://tomonorimatsumura.github.io/blog/p889/</guid><description>参考サイト Git で常に除外したい設定を .gitconfig で設定する方法 | ウェブル Eclipse で Git を使う – アンドロイドプロジェクトのリポジトリ作成 – Android 開発入門</description></item><item><title>EclipseにEgitをインストールする</title><link>https://tomonorimatsumura.github.io/blog/p674/</link><pubDate>Tue, 12 Feb 2013 08:07:33 +0000</pubDate><guid>https://tomonorimatsumura.github.io/blog/p674/</guid><description>少し前からEgitを使っているが、ユーザー毎のSSHの設定でかなりハマったのでメモ。
EclipseにEgitをインストールする WindowsでEclipseを使う場合はAptanaプラグインの使用時に注意する。EclipseのAptanaのGitドライバの関係で、Gitのコミットメッセージが文字化けする場合がある。
Eclipse→ヘルプ→新規ソフトウェアのインストール→作業対象(W):から**「すべての使用可能なサイト」**を選択 フィルター入力に**「Egit」**と入力 すべての選択肢にチェックを入れインストールする SSHの設定をする 2時間ほどハマった。ディフォルトだとEclipseが鍵ファイルをうまくみつけられないので.ssh/configに設定を書き込む
Host hoge # 接続名（なんでもよい） HostName {yourhostname} # 接続先のドメイン名やIPアドレス User {sshuser} # SSH接続ユーザー名 PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa # 鍵ファイルの場所
Eclipse側ではディフォルトで鍵ファイルを見つけに行く設定が **Eclipse**→**ウィンドウ**→**設定**→**一般**→**ネットワーク接続**→**SSH2** にある。適切に設定されているか確認する。 ### 参考サイト * [ssh 接続を簡単にする ~/.ssh/config | dogmap.jp][1] * [Git &amp;amp;#8211; rails開発してたらコミットコメントが文字化けた話 &amp;amp;#8211; Qiita](http://qiita.com/shin1988/items/90cd428b5a3b64560e8b)&amp;lt;/il&amp;gt; * [Ktouth Brand. on Web &amp;amp;#8211; 解決：Aptana(eclipse) + EGit のコミットログ文字化けと化けたログの修正方法](http://www.k-brand.gr.jp/log/002510)&amp;lt;/il&amp;gt; &amp;lt;/ul&amp;gt; [1]: http://dogmap.</description></item><item><title>ローカルで作成したGitリポジトリをリモートへプッシュする</title><link>https://tomonorimatsumura.github.io/blog/p640/</link><pubDate>Sun, 27 Jan 2013 11:31:02 +0000</pubDate><guid>https://tomonorimatsumura.github.io/blog/p640/</guid><description>Gitリポジトリの初期化の時に、共有オプションを有効にしないと以下のようなエラーがでる。
remote: error: refusing to update checked out branch: refs/heads/master remote: error: By default, updating the current branch in a non-bare repository remote: error: is denied, because it will make the index and work tree inconsistent remote: error: with what you pushed, and will require &amp;quot;git reset --hard&amp;quot; to match remote: error: the work tree to HEAD. remote: error: remote: error: You can set &amp;quot;receive.denyCurrentBranch&amp;quot; configuration variable to remote: error: &amp;quot;ignore&amp;quot; or &amp;quot;warn&amp;quot; in the remote repository to allow pushing into remote: error: its current branch; however, this is not recommended unless you remote: error: arranged to update its work tree to match what you pushed in some remote: error: other way.</description></item><item><title>Gitメモ</title><link>https://tomonorimatsumura.github.io/blog/p612/</link><pubDate>Sun, 20 Jan 2013 18:56:08 +0000</pubDate><guid>https://tomonorimatsumura.github.io/blog/p612/</guid><description>git-revertでコミット履歴を消せるらしい。。。
http://www.kernel.org/pub/software/scm/git/docs/git-revert.html
参考サイト
http://labs.timedia.co.jp/2011/02/git-various-undo.html</description></item><item><title>さくらのスタンダードにgitをインストールする</title><link>https://tomonorimatsumura.github.io/blog/p444/</link><pubDate>Mon, 17 Dec 2012 09:12:47 +0000</pubDate><guid>https://tomonorimatsumura.github.io/blog/p444/</guid><description>ノートPCからさくらのVPSにSSHで繋ごうと思ったのだが、鍵認証の設定がうまくいかず、さくらのスタンダードでもgitを操作出来るようにした。
gitをインストールする $HOME/local以下にgitを入れる。Subversionもこのディレクトリ以下に入っているので。
cd $HOME/local/scr wget http://git-core.googlecode.com/files/git-1.8.0.tar.gz tar -xzvf git-1.8.0.tar.gz cd git-1.8.0 ./configure -prefix=$HOME/local gmake gmake install インストールの確認 $HOME/.cshrcでパスの設定をいじる必要があるが、ちょっと時間がないのでとりあえずは
/home/smokingarage/local/bin/git --version 参考サイト さくらのレンタルサーバ（スタンダード）にGitをインストール – テクスト讃歌</description></item><item><title>CentOS6でSubversionからgitに移行する</title><link>https://tomonorimatsumura.github.io/blog/p290/</link><pubDate>Sun, 02 Dec 2012 11:59:34 +0000</pubDate><guid>https://tomonorimatsumura.github.io/blog/p290/</guid><description>一人プロジェクトの場合、Subversionみたいなガチガチのバージョン管理を使う必要も無いなと思う所もあり、gitに移行することにした。参考にしたのは入門git
git-svnが利用できるか確認する まずgitとSubversionを連携させるためのツールがインストールされているか確認する
git svn --version **Can’t locate SVN/Core.pm in @INC…**とエラーが出る。どうやらSubversion用のPerlのバインディングがインストールされていないらしい。とりあえずはyumで対応する。
yum install subversion-perl 簡単に入る。何かしらgitプロジェクトを作成し、gitの作業ツリー内で再びバージョンを確かめると
移行の準備は整った。
Subversionリポジトリをインポートする さくらのレンタルサーバにあるリポジトリからローカルにリビジョン番号を指定してインポートしてみる。
cd /root/ダウンロード git svn clone -r {start_rev}:{end_rev} svn+ssh://{username}@{domain}.sakura.ne.jp/home/{username}/var/svn/{repo} インポートされたリポジトリの確認 cd git-repository git log 操作方法が分からないときはhを入力するとHELPが表示される
SUMMARY OF LESS COMMANDS Commands marked with * may be preceded by a number, N. Notes in parentheses indicate the behavior if N is given. h H Display this help. q :q Q :Q ZZ Exit. --------------------------------------------------------------------------- MOVING e ^E j ^N CR * Forward one line (or N lines).</description></item><item><title>CentOS6にgitをインストールする</title><link>https://tomonorimatsumura.github.io/blog/p165/</link><pubDate>Fri, 16 Nov 2012 15:45:38 +0000</pubDate><guid>https://tomonorimatsumura.github.io/blog/p165/</guid><description>gitを使う必要が出てきたのでインストール。
必要環境の確認 まずgitのサポートページで必要ライブラリを確認。どうやらcURLやopenSSLなどが必要らしい
yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gitをインストール gitのリポジトリサイトから最新版を入手してインストール
cd /usr/local/src wget http://git-core.googlecode.com/files/git-1.8.0.tar.gz tar -xzvf git-1.8.0.tar.gz cd git-1.8.0 ./configure --prefix=/usr/local/ make make install **Can’t locate ExtUtils/MakeMaker.pm in @INC…**って言うエラーが出る場合は、perl-ExtUtils-MakeMakerをインストール。通常は入って無いと思われるので最初に入れておいた方が無難。
yum install perl-ExtUtils-MakeMaker gitの確認 バージョンを確認してみる
git --version 参考サイト Git – Gitのインストール Git – Book</description></item></channel></rss>